{"version":3,"sources":["components/NewSingle.js","components/News.js","components/SingleSide.js","components/Sidenews.js","App.js","serviceWorker.js","index.js"],"names":["NewSingle","_ref","item","react_default","a","createElement","className","src","urlToImage","alt","title","source","name","href","url","target","News","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderItems","state","news","map","components_NewSingle","key","_this2","concat","type","query","process","axios","get","then","res","data","setState","articles","catch","err","console","log","Component","SingleSide","Sidenews","sidenews","components_SingleSide","App","news1","news2","news3","components_News","components_Sidenews","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bafb891.chunk.js","sourcesContent":["import React from 'react'\n\nconst NewSingle = ({ item }) => {\n    return <div className=\"col-md-12 col-lg-12 newsingle\">\n        <div className=\"card\">\n            <div className=\"card-image col-xs-auto col-md-auto col-lg-8\">\n                <img src={item.urlToImage} alt={item.title} />\n                <span className=\"card-title\">\n                    {item.source.name}\n                </span>\n            </div>\n            <div className=\"card-content\">\n                <p>{item.title}</p>\n            </div>\n            <div className=\"card-action\">\n                <a href={item.url} target=\"_blank\"\n                    className=\"link btn btn-primary\">\n                    Full Article</a>\n            </div>\n        </div>\n    </div>\n}\n\n\nexport default NewSingle;","import React, { Component } from 'react';\nimport NewSingle from './NewSingle';\nimport axios from 'axios';\n\nclass News extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            news: []\n        };\n    }\n\n    componentDidMount() {\n        const url = `https://newsapi.org/v2/${this.props.news.type}?${this.props.news.query}&apiKey=${process.env.REACT_APP_API_KEY}`;\n        axios.get(url)\n            .then((res) => {\n                return res.data;\n            })\n            .then(data => {\n                this.setState({\n                    news: data.articles\n                })\n            })\n            .catch(err => console.log(err));\n    }\n\n    renderItems = () => {\n        return this.state.news.map((item) => (\n            <NewSingle key={item.url} item={item} />\n        ))\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                {this.renderItems()}\n            </div>\n        );\n    }\n}\n\nexport default News;","import React from 'react'\n\nconst SingleSide = ({ item }) => {\n\n    return <div className=\"divider\">\n        <a href={item.url} target=\"_blank\" className=\"lin\">\n            <div className=\"section\">\n                <h5>{item.source.name}</h5>\n                <p>{item.title}</p>\n            </div>\n        </a>\n\n    </div>\n\n}\n\nexport default SingleSide;","import React, { Component } from 'react';\nimport SingleSide from './SingleSide';\nimport axios from 'axios';\n\nclass Sidenews extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sidenews: []\n        };\n    }\n\n    componentDidMount() {\n        const url = `https://newsapi.org/v2/${this.props.news.type}?${this.props.news.query}&apiKey=${process.env.REACT_APP_API_KEY}`;\n        axios.get(url)\n            .then((res) => {\n                this.setState({\n                    sidenews: res.data.articles\n                })\n            })\n            .catch(err => console.log(err));\n\n    }\n\n    renderItems = () => {\n        return this.state.sidenews.map((item) => (\n            <SingleSide key={item.url} item={item} />\n        ))\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>{this.renderItems()}</h2>\n            </div>\n        );\n    }\n}\n\nexport default Sidenews;","import React, { Component } from 'react';\nimport './App.css';\nimport News from './components/News';\nimport Sidenews from './components/Sidenews';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      news1: {\n        type: 'top-headlines',\n        query: 'sources=bbc-news'\n      },\n      news2: {\n        type: 'everything',\n        query: 'domains=techcrunch.com&language=en'\n      },\n      news3: {\n        type: 'everything',\n        query: 'domains=comicbookmovie.com&language=en'\n      }\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar-fixed\">\n          <h1>News Feed</h1>\n          <nav>\n            <div className=\"nav-wrapper indigo lighten-4\">\n              <a href=\"/news-api\" className=\"brand-logo center\">My Feed</a>\n            </div>\n          </nav>\n        </div>\n        <div className=\"container-fluid mt-5 ml-3\">\n          <div className=\"row\">\n            <div className=\"col xs-8 col-md-8 col-lg-8 container-wrapper\">\n              <News news={this.state.news1} />\n              <News news={this.state.news2} />\n            </div>\n            <div className=\"col-md-4\">\n              <Sidenews news={this.state.news3} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}